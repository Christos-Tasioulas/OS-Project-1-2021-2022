Ραφαήλ-Χρήστος Τασιούλας
sdi1800191

Λειτουργικά Συστήματα Εργασία 1

make.sh bash script

	Η Εργασία χωρίζεται σε 2 φακέλους, τον Parent Process (PP) και τον Child Process (CP). Οι δύο φάκελοι, μεταγλωτίζονται ταυτόχρονα με την βοήθεια ενός bash script του make.sh.Το συγκεκριμένο αρχείο αμα κληθεί ως ./make.sh make, με τη βοήθεια των Makefile στους δύο φακέλους, μεταγλωτίζει τα modules των 2 φακέλων τον ένα μετά τον άλλο ενώ με την ./make.sh make clean σβήνει τα object files των modules που εχουν δημιουργηθεί από την μεταγλώτιση. Οι ./make.sh make run και ./make.sh make valgrind εκτελούν το Parent Process με ή χωρίς valgrind αντλιστοιχα. 

Parent Process

	Η εκτέλεση του Parent Process ξεκινάει από το main.cpp και την main η οποία ελέγχει εάν τα arguments που δόθηκαν είναι τα σωστά (<filename.txt> <number_of_children> <number_of_transactions>)και έπειτα μεταφέρει τον έλεγχο στη συνάρτηση handle του handle.cpp.
	Το Handle.cpp, όπως αναφέρθηκε, περιέχει την handle, μία συνάρτση η οποία παίρνει τον έλεγχο του προγράμματος δημιουργώντας, και συνδέοντάς την με το parent process, την διαμοιραζόμενη μνήμη που θα μοιράζονται για να επικοινωνούν το parent process με τα child processes καθώς και τα ίδια τα child processes. Μάλιστα, για την κοινή μνήμη υλοποιείται μια δομή για την ευκολότερη πρόσβαση των δεδομένων μέσα σε αυτήν. Η κοινή μνήμη έχει μέγεθος ίσο με την προαναφερθούσα δομή (βλ. παρακάτω). Η συνάρτηση μεταφέρει έπειτα τον έλεγχο στην solution του solution.cpp (βλ. παρακάτω). Αφού ολοκληρωθεί η εκτέλεση αυτής της συνάρτησης, η handle περιμένει όλα τα child processes να τελειώσουν και έπειτα τα διαγράφει μάζι με την κοινή μνήμη, αφού την αποσυνδέσει από το parent process, και την αντίστοιχη δομή. 
	Η δομή υλοποιείται στο SHM_Structure.h και αποτελέιται από ένα unsigned int line_num αριθμό που θα συμβολίζει την γραμμή κειμένου που θέλει το κάθε παιδί, μία C-συμβολοσειρά line με μέγεθος 100, όπως ζητήθηκε, στην οποία θα αποθηκεύεται από τον γονέα η κάθε γραμμή που ζητείται και από 3 σημαφόρους, έναν για το parent process (server_sem), ένα για τα child_processes (client_sem) και έναν σημαφόρο για να δοθεί χρόνος στον γονέα να δώσει τη σωστή γραμμή που ζητήθηκε στο παιδί (text_sem).
	Έπειτα υπάρχουν οι συναρτήσεις αρχικοποίησης, διάλυσης αλλά και μία συνάρτηση στην οποία θα ενημερώνεται η γραμμή που ζητείται κάθε φορά από τα child processes (set_line). Αυτές υλοποιούνται στο αντίστοιχο cpp αρχείο SHM_Structure.cpp. Για την αρχικοποίηση της δομής η γραμμή αρχικοποιείται με ένα κενό και το νούμερο με 0. Όλοι οι σημαφόροι αρχικοποιούνται επίσης και παίρνουν value 0 εκτός από τον σημαφόρο των παιδιών καθώς τα child processes ξεκινάνε κάθε δοσοληψία δίνοντας τον αριθμό γραμμής που θέλουν στην δομή της κοινής μνήμης και συνεπώς στο parent_process. H set_line είναι απλά μια strcpy αλλά έχει ως όρισμα C++-στμβολοσειρά η οποία για να κληθεί η αληθινή strcpy μετατρέπεται σε C-συμβολοσειρά επιτόπου. Στην συνάρτηση διάλυσης καταστρέφονται οι σημαφόροι.
	Τα παιδιά δημιουργούνται στο Child.cpp στην child_creation. Αφού δημιουργηθούν οι διαδικασίες, καλείται η execl με ορίσματα όπως ο αριθμός γραμμών του αρχείου κειμένου που δόθηκε, ο αριθμός δοσοληψιών που θα γίνουν σε κάθε παιδί και το key της κοινής μνήμης που δημιουργήθηκε στην handle πέρα από τα ορίσματα που χρειάζονται ώστε να ξεκινήσουν να εκτελούνται τα child_processes. Στο αρχείο υπάρχει και η child_waiting η οποία κάνει την parent process να περιμένει τα child processes να τελειώσουν όταν χρειαστεί.
	Υπάρχει το File.cpp το οποίο έχει την get_file_size που επιστρέφει, μετρώντας μία μία τις γραμμές, τον αριθμό των γραμμών του αρχείου με το όνομα που δόθηκε και η get_specific_file_line που επιστρέφει με τον ίδιο τρόπο τη γραμμή του αρχείου με το όνομα που δόθηκε η οποία έχει τον αριθμό που δόθηκε (π.χ. αν δόθηκε ο αριθμός 14 θα επιστρέψει την 14η γραμμή) αρκεί ο αριθμός να είναι μικρότερος ή ίσος από τον αριθμό που επιστράφηκε από την get_file_size για το ίδιο αρχείο ο οποίος περνιέται σαν όρισμα στην συνάρτηση.
	Η solution του solution.cpp αναλαμβάνει τον έλεγχο του προγράμματος από εδώ και πέρα. Αρχικοποιεί και τελικά
διαλύει τα πεδία της δομής της κοινής μνήμης και στην ίδια την συνάρτηση συμβαίνουν όλες οι δοσολήψεις του γονέα με όλα τα child_processes (N*K επαναλήψεις). Το parent process σε κάθε επανάληψη πρώτα περιμένει το εκάστοτε child process να δώσει τον αριθμό γραμμής που θέλει στην κοινή μνήμη, έπειτα διαβάζει (και εμφανίζει) τον αριθμό και παίρνει τη γραμμή του αρχείου κειμένου με την get_specific_line, την τοποθετεί στην κοινή μνήμη και τέλος τερματίζει την αναμονή στον σημαφόρο text_sem ου περιμένει όσο περνιέται το σωστό κείμενο στην κοινή μνήμη.
	Όλα τα αρχεία cpp επικοινωνούν μεταξύ τους με την βοήθεια του Interface.h στο οποίο γίνεται include το SHM_Structure.h και έκει υπάρχουν τα prototypes για το Child.cpp, το File.cpp και το Solution.cpp. Για λόγους information hiding, η main.cpp επικοινωνεί μόνο με την Handle.cpp μέσω του Handle.h το οποίο περιλαμβάνει το prototype της handle. 

Child Processes

	Η εκτέλεση των Child Processes, αφού κληθεί η execl, ξεκινάει στο main.cpp η οποία θέτει τα arguments που δόθηκαν (<numOfLines> <numOfTransactions> <shmid>) αντίστοιχα. Έπειτα, συνδέει την διαμοιραζόμενη μνήμη με το shmid που δόθηκε με το κάθε child process και μεταφέρει τον έλεγχο στην solution (βλ. παρακάτω). Τέλος, η κοινή μνήμη αποσυνδέεται από το child process.
	Και τα child processes έχουν header αρχείο για τον ορισμό της δομής της κοινής μνήμης (SHM_Structure.h). Η δομή και τα πεδία της είναι ολόιδια με την δομή που ορίστηκε στο Parent Process (βλ. Parent Process). Η διαφορά όμως υπάρχει στις συναρτήσεις που ορίζονται. Εδώ λοιπόν, η μόνη συνάρτηση που ορίζεται είναι η set_line_num η οποία αναθέτει το νούμερο που δίνεται στο αντίστοιχο πεδίο για τον αριθμό γραμμής (line_num) στη δομή που υπάρχει για την κοινή μνήμη. Αυτή η συνάρτηση υλοποιείται σε ένα ακόμα αρχείο SHM_structure.cpp.
	Στο Solution.cpp υπάρχει μια βοηθητική συνάρτηση η random_line η οποία επιστρέφει ψευδοτυχαίο νούμερο γραμμής ώστε να περαστεί στην κοινή μνήμη αργότερα. Στην ουσία, πρώτα υλοποιείται μια τυχαία επιλογή αριθμού από το 1 μέχρι τον αριθμό γραμμών του αρχείου που δόθηκαν (έστω α) και μετά βρίσκει το υπόλοιπο του process_id όταν διαιρεθεί με τον αριθμό των γραμμών (έστω β) ώστε να διαφοροποιείται κάθε φορά η επιλογή γραμμής μεταξύ παιδιών έστω και λίγο. Έπειτα χρησιμοποιούμε το άθροισμα α+β (έστω Δ=α+β) και επιστρέφουμε το άθροισμα του πηλίκου της διαίρεσης του Δ με το 2 και του υπολοίπου της ίδιας διαίρεσης (έστω i = [Δ div 2 + Δ mod 2]).
	Στην κύρια συνάρτηση του module, την solution, αφού αναλάβει τον έλεγχο του προγράμματος, πραγματοποιούνται όλες οι δοσοληψίες του κάθε child process με τον γονέα (N επαναλήψεις). Σε κάθε επανάληψη, πρώτα το child_process περιμένει τον γονέα να τελειώσει την προηγούμενη δοσοληψία (αν χρειάζεται) και μετά ξεκινάει η χρονομέτρηση κάθε δοσοληψίας με την gettimeofday της βιβλιοθήκης <sys/time.h> η οποία επιστρέφει τον χρόνο σε seconds και σε microseconds σε ενιαία δομή. Ο χρόνος ξεκινάει να μετράει και τότε το child process καλεί την προαναφερθείσα βοηθητική συνάρτηση random_line για να επιλέξει αριθμό γραμμής που θα παραλάβει από τον γονέα. Τότε θα δώσει την εντολή στον σημαφόρο για τον γονέα να σταματήσει να περιμένει ενώ το ίδιο το child process θα περιμένει μέχρι να περαστεί η κατάλληλλη γραμμή στην κοινή μνήμη δίνοντας την κατάλληλη εντολή στον text_sem. Έπειτα διαβάζει (και εμφανίζει) την αντίστοιχη γραμμή. Τότε σταματάει και η χρονομέτρηση. Καλείται ξανά η gettimeofday με διαφορετική μετάβλητη για όρισμα και ο χρόνος που βρέθηκε από την αφαίρεση των microseconds της 2ης από την 1η μεταβλητή που χρησιμοποιήθηκαν ως ορίσματα προστείθεται στον συνολικό χρόνο που έκαναν όλες οι δοσοληψίες της διαδικασίας. Τέλος, δίνει το σήμα στην επόμενη συναλλαγή να γίνει. Μετά τις συναλλαγές, εμφανίζεται για κάθε παιδί ο μέσος χρόνος ανά δοσοληψία (processes_time/numOfTransactions).         
	Όλα τα αρχεία cpp επικοινωνούν μεταξύ τους με την βοήθεια του Interface.h στο οποίο γίνεται include το SHM_Structure.h και έκει υπάρχει και το prototype για την solution.

Παρατηρείται κατά την εκτέλεση του προγράμματος ότι τα child processes εκτελούνται το ένα μετά το άλλο. 
	      
        